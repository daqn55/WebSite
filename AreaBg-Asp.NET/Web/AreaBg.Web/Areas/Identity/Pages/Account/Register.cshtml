@page
@model RegisterModel
@{
    ViewData["Title"] = "Създаване на профил";
}

@if (ModelState.ErrorCount > 0)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <strong class="font-sp">@ModelState.Values.First().Errors.First().ErrorMessage</strong>
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}
<h1 class="font-sp">РЕГИСТРАЦИЯ</h1>

<div class="row">
    <div class="col-md-4 font-sp">
        <form asp-route-returnUrl="@Model.ReturnUrl" method="post">
            <h4>Създайте профил</h4>
            <hr />
            <div class="form-group">
                <label asp-for="Input.FirstName"></label>
                <input asp-for="Input.FirstName" class="form-control" />
                <span asp-validation-for="Input.FirstName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Input.Email"></label>
                <input asp-for="Input.Email" class="form-control" />
                <span asp-validation-for="Input.Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Input.Password"></label>
                <input asp-for="Input.Password" class="form-control" />
                <span asp-validation-for="Input.Password" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Input.ConfirmPassword"></label>
                <input asp-for="Input.ConfirmPassword" class="form-control" />
                <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
            </div>
            <div class="form-group">
                @Html.CheckBoxFor(x => x.Input.AcceptTerms)
                Запознах се с <a id="terms-accept" class="text-purple" href="/terms">@Html.LabelFor(x => x.Input.AcceptTerms)</a> и ги приемам
                <br />
                <span asp-validation-for="Input.AcceptTerms" class="text-danger"></span>
            </div>
            <button type="submit" class="btn btn-purple-btn btn-lg mt-3" style="font-size: 14px">РЕГИСТРАЦИЯ</button>
        </form>
    </div>
    <div class="col det-m-lg det-m-sm">
        <section class="font-sp">
            <h4>РЕГИСТРАЦИЯ С FACEBOOK АКАУНТ</h4>
            <hr />
            @{
                if ((Model.ExternalLogins?.Count ?? 0) == 0)
                {
                    <div>
                        <p>
                            There are no external authentication services configured. @*See <a href="https://go.microsoft.com/fwlink/?LinkID=532715">this article</a>
                                for details on setting up this ASP.NET application to support logging in via external services.*@
                        </p>
                    </div>
                }
                else
                {
                    <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="form-horizontal">
                        <div>
                            <p>
                                @foreach (var provider in Model.ExternalLogins)
                                {
                                    <button type="submit" class="btn btn-primary" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">@provider.DisplayName</button>
                                }
                            </p>
                        </div>
                    </form>
                }
            }
        </section>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // extend range validator method to treat checkboxes differently
        var defaultRangeValidator = $.validator.methods.range;
        $.validator.methods.range = function (value, element, param) {
            if (element.type === 'checkbox') {
                // if it's a checkbox return true if it is checked
                return element.checked;
            } else {
                // otherwise run the default validation function
                return defaultRangeValidator.call(this, value, element, param);
            }
        }
    </script>
}
